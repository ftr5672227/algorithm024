64. 最小路径和

class Solution {

        public int minPathSum(int[][] grid) {
            int[][] dp = new int[grid.length][grid[0].length];
            dp[0][0] = grid[0][0];
            for (int down = 0; down < grid.length; down++) {
                for (int right = 0; right < grid[down].length; right++) {
                    if (down == 0) {
                        if (right == 0) {
                            continue;
                        } else {
                            dp[down][right] = dp[down][right - 1] + grid[down][right];
                        }
                    } else {
                        if (right == 0) {
                            dp[down][right] = dp[down - 1][right] + grid[down][right];
                        } else {
                            dp[down][right] = Math.min(dp[down - 1][right], dp[down][right - 1]) + grid[down][right];
                        }
                    }
                }
            }

            return dp[grid.length - 1][grid[0].length - 1];
        }


    }



面试题 17.09. 第 k 个数
class Solution {
public int getKthMagicNumber(int k) {
            int a = 0;
            int b = 0;
            int c = 0;
            int[] num = new int[k];
            num[0] = 1;

            for (int i = 1; i < k; i++) {
                num[i] = Math.min(num[a] * 3, Math.min(num[c] * 7, num[b] * 5));
                if (num[i] == num[a] * 3) {
                    a++;
                } 
                if (num[i] == num[b] * 5) {
                    b++;
                }
                if (num[i] == num[c] * 7) {
                    c++;
                }
            }

            return num[k - 1];
        }


322. 零钱兑换
class Solution {



        public int coinChange(int[] coins, int amount) {
            if (coins.length == 0) {
                return -1;
            }
            int[] cache = new int[amount + 1];
            Arrays.fill(cache, amount + 1);
            cache[0] = 0;
            
            for (int i = 1; i <= amount; i++) {
                for (int j = 0; j < coins.length; j++ ) {
                    if (i - coins[j] >= 0) {
                        cache[i] = Math.min(cache[i], cache[i -coins[j]] + 1);
                    }
                }
            }

            return cache[amount] == amount + 1 ? -1 : cache[amount];
        }



    }


213. 打家劫舍 II
class Solution {
        public int rob(int[] nums) {
            if (nums == null || nums.length == 0) {
                return 0;
            }
            if (nums.length == 1) {
                return nums[0];
            }
            return Math.max(single(Arrays.copyOfRange(nums, 0, nums.length - 1)), 
                single(Arrays.copyOfRange(nums, 1, nums.length)));
        }

        private int single(int[] nums) {
            int pre = 0;
            int suf = 0;
            for (int num : nums) {
                int yes = pre + num;
                int no = suf;
                int cur = Math.max(yes, no);
                pre = suf;
                suf = cur;
            }

            return suf;
        }
    }






